@typeparam TItem
@inject DialogService dialog
@inject NotificationService notificationService
@inject NavigationManager UriHelper
@using Microsoft.AspNetCore.SignalR.Client
@using AutoMapper
@inject HttpClient Http

@* Hiện title của bảng *@
<div class="row" style="margin-bottom:30px; margin-top: 10px">
    <div class="col-md-12">
        <RadzenLabel
            Style="text-align: center;color: rgb(10, 10, 178); font-family: 'Source Sans 3', sans-serif ; font-weight: bold; width: 100%; font-size: 25px "
            Text="@("DANH SÁCH " + TableTitle.ToUpper())">
        </RadzenLabel>
    </div>
</div>
<div style="justify-content:space-between;margin-bottom:5px; margin-right: 1rem">
    <div class="col-12 col-md-4" style="padding: 0px">
        <RadzenButton Click=@(args => AddRow()) Text="@AddBtnCaption" Disabled=@disableAdd />
        @if (MoreButtons != null)
        {
            @MoreButtons
        }
    </div>
    <div class="col-12" style="margin-top:2rem">
        <RadzenDataGrid GridLines="DataGridGridLines.Both" EditMode="DataGridEditMode.Single" Data=@listData
            @ref=@GrdTable TItem="TItem" AllowColumnResize="true" PageSizeOptions="@pageSizeOptions" LoadData=@LoadData
            IsLoading=@isLoading Count="@count" ShowPagingSummary="@showPagerSummary"
            PagingSummaryFormat="@pagingSummaryFormat" AllowPaging="true"
            Style="--rz-grid-header-font-size: 1rem; --rz-grid-cell-font-size: 1rem"
            PageSizeText="Bản ghi trên một trang" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow"
            EmptyText="Không có dữ liệu">
            <Columns>
                <RadzenDataGridColumn TItem="TItem" Title="STT" Sortable="false" Width="50px"
                    TextAlign="TextAlign.Center">
                    <Template Context="ctx">
                        @(listData.IndexOf(ctx) + 1 + GrdTable.CurrentPage * GrdTable.PageSize)
                    </Template>
                </RadzenDataGridColumn>
                @MoreColumns
                <RadzenDataGridColumn TItem="TItem" Title="Chi tiết" TextAlign="TextAlign.Center" Width="130px">
                    
                    <Template Context="ctx">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Warning" Click="@(args => EditRow(ctx))" />

                        <RadzenButton Icon="delete_outline" ButtonStyle="ButtonStyle.Danger"
                            Click="@(args => DeleteRow(ctx))" />

                    </Template>

                    <EditTemplate Context="ctx">
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat"
                            Click="@((args) => SaveRow(ctx))">
                        </RadzenButton>
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                            Click="@((args) => CancelEdit(ctx))">
                        </RadzenButton>
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat"
                            Shade="Shade.Lighter" Click="@(args => DeleteRow(ctx))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
</div>
@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; } = default!;
    @* Điều kiện để lọc dữ liệu *@
    [Parameter] public string lamda { get; set; }
    @* Title cho bảng *@
    [Parameter] public string TableTitle { get; set; } = "";
    @* Title cho nút thêm mới *@
    [Parameter] public string AddBtnCaption { get; set; } = "Thêm mới";
    @* Thêm các nút lệnh khác *@
    [Parameter] public RenderFragment? MoreButtons { get; set; } = null;
    @* Có hiện cột thao tác hay không 13/06/2024 - Nghĩa *@
    [Parameter] public bool HasOperation { get; set; } = true;
    @* Có hiện cột xóa hay không 13/06/2024 - Nghĩa *@
    [Parameter] public bool HasDeleteOperation { get; set; } = true;
    @* Query từ ngoài truyền vào *@
    [Parameter] public string query { get; set; } = default!;
    @* Token từ ngoài truyền vào *@
    [Parameter] public string token { get; set; } = default!;
    @* Thêm các cột trong Datagrid *@
    [Parameter] public RenderFragment? MoreColumns { get; set; } = null;
    @* Cấu hình hàm gọi delete ở ngoài *@
    [Parameter] public EventCallback<TItem> OnDelete { set; get; }
    @* Cấu hình hàm gọi create ở ngoài *@
    [Parameter] public EventCallback<TItem> OnCreate { set; get; }
    @* Cấu hình hàm gọi update ở ngoài *@
    [Parameter] public EventCallback<TItem> OnUpdate { set; get; }
    @* Cấu hình hàm gọi cancel edit ở ngoài *@
    [Parameter] public EventCallback<TItem> OnCancelEdit { set; get; }
    @* Cấu hình hàm gọi lấy dữ liệu ở ngoài *@
    [Parameter] public EventCallback<List<TItem>> OnReloadData { set; get; }
    @* Cấu hình cho Datagrid *@
    RadzenDataGrid<TItem> GrdTable = default!;
    List<TItem> listData = default!;
    string pagingSummaryFormat = "Trang {0} / {1} (Tổng số {2} bản ghi)";
    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30 };
    bool isLoading = false;
    bool showPagerSummary = true;
    int count;
    bool datanull = false;
    @* Disable nút thêm mới *@
    bool disableAdd = false;


    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;
        await Task.Yield();
        var authState = await authenticationState;
        token = authState.User.Identity?.Name ?? "";
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        HttpResponseMessage response;

        string url = "";
        if (lamda == null)
        {
            url = $"{query}?PageNumber={(int)(args.Skip / GrdTable.PageSize + 1)}&PageSize={GrdTable.PageSize}&lamda=\" \"";
        }
        else
        {
            url = $"{query}?PageNumber={(int)(args.Skip / GrdTable.PageSize + 1)}&PageSize={GrdTable.PageSize}&lamda={lamda}";
        }

        response = await Http.GetAsync(url);

        ServiceResponse<PagedList<TItem>> data = new ServiceResponse<PagedList<TItem>>();

        if (response.IsSuccessStatusCode)
        {
            data = await response.Content.ReadFromJsonAsync<ServiceResponse<PagedList<TItem>>>();
            if (data != null && data.Data != null)
            {
                count = data.Data.TotalCount;
                listData = data.Data.Items;
            }
            else
            {
                count = 0;
                listData = new List<TItem>();
                notificationService.Notify(NotificationSeverity.Error, "Thông báo:", "Lỗi khi xử lý dữ liệu", duration: 2000);
            }
        }
        else
        {
            count = 0;
            listData = default!;
            notificationService.Notify(NotificationSeverity.Error, $"Thông báo:", "Lỗi khi lấy dữ liệu", duration: 2000);

        }
        isLoading = false;
        await OnReloadData.InvokeAsync(listData);
    }
    public async Task ReloadTable()
    {
        GrdTable.Reset(true);
        await GrdTable.Reload();
    }
    protected async Task AddRow()
    {
        var obj = new object();
        var config = new MapperConfiguration(cfg => cfg.CreateMap<object, TItem>());
        IMapper mapper = config.CreateMapper();
        TItem record = mapper.Map<TItem>(obj);
        disableAdd = true;
        if (listData.Count > 0)
        {
            await GrdTable.InsertRow(record);
        }
        else
        {
            listData.Add(record);
            datanull = true;
            await GrdTable.EditRow(record);
        }
    }

    public async Task SaveRow(TItem record)
    {
        disableAdd = false;
        datanull = false;
        await GrdTable.UpdateRow(record);
    }
    protected async Task DeleteRow(TItem record)
    {

        if (listData.Contains(record))
        {
            var confirmResult = await dialog.Confirm
            (
            "Chắc chắn muốn xóa " + "bản ghi" + " ?",
            "Xác nhận xoá",
            new ConfirmOptions()
                {
                    OkButtonText = "Đồng ý",
                    CancelButtonText = "Hủy",
                    Width = "400px"
                }
            );

            if (confirmResult.HasValue && confirmResult.Value)
            {
                await OnDelete.InvokeAsync(record);
            }
        }
        else
        {
            GrdTable.CancelEditRow(record);
        }
        disableAdd = false;

        await GrdTable.Reload();

    }

    protected async Task EditRow(TItem record)
    {
        disableAdd = true;
        await GrdTable.EditRow(record);
    }

    protected async Task OnCreateRow(TItem record)
    {
        await OnCreate.InvokeAsync(record);
    }

    protected async Task OnUpdateRow(TItem record)
    {
        disableAdd = false;
        if (datanull)
        {
            await OnCreate.InvokeAsync(record);
        }
        else
        {
            await OnUpdate.InvokeAsync(record);
        }
    }

    protected async Task CancelEdit(TItem record)
    {
        disableAdd = false;
        GrdTable.CancelEditRow(record);

        await OnCancelEdit.InvokeAsync(record);
    }
}