@page "/login"
@page "/"
@layout LoginLayout
@using NewProject.Authentication
@using NewProject.Services
@using NewProject.Models
@inject NavigationManager UriHelper
@inject NotificationService NotificationService
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient Http

<PageTitle>Đăng nhập hệ thống</PageTitle>

<AuthorizeView>
    <Authorized>
        <RedirectToHome />
    </Authorized>
    <NotAuthorized>
        <div class="login min-vh-100 sm:py-16 bg-secondary-100 flex-column">
            <div class="row justify-content-center align-items-center">
                <div class="col-6" style="width: 45%">
                    <div class="card shadow-2-strong" style="border-radius: 0.5rem">
                        <div class="card-body p-8">
                            <div style="display: flex; align-items: center; justify-content: center">
                                <img src="logo.png"
                                     style="height:90px;width:auto; margin: 20 20 20 0; padding-right: 30px;" />
                                <div class="text-center">
                                    <strong style="font-size: 1.8rem; margin-left:-20px;  color: #112572">HỆ THỐNG QUẢN LÝ TÀI KHOẢN NGƯỜI DÙNG</strong>
                                </div>
                            </div>
                            <div style="margin-left: 2rem; margin-right: 1.7rem">
                                <RadzenTemplateForm TItem="LoginModel" Data=@loginModel Submit="@HandleLoginAsync">
                                    <ChildContent Context="ctx">
                                        <RadzenFormField style="width: 100%; margin-top: 1.5rem" Text="Tên tài khoản">
                                            <Start>
                                                <RadzenIcon Icon="account_circle" />
                                            </Start>
                                            <ChildContent>
                                                <RadzenTextBox @bind-Value="@loginModel.Username" />
                                            </ChildContent>
                                        </RadzenFormField>
                                        <RadzenFormField style="width: 100%; margin-top:1.5rem" Text="Mật khẩu">
                                            <Start>
                                                <RadzenIcon Icon="lock" />
                                            </Start>
                                            <ChildContent>
                                                <RadzenTextBox @bind-Value="@loginModel.Password"
                                                               Visible="@(!showPassword)" />
                                                <RadzenPassword @bind-Value="@loginModel.Password"
                                                                Visible="@showPassword" />
                                            </ChildContent>
                                            <End>
                                                <RadzenButton Icon="@(showPassword ? "visibility" : "visibility_off")"
                                                              Click="@(() => showPassword = !showPassword)"
                                                              Variant="Variant.Text"
                                                              Size="ButtonSize.Small" />
                                            </End>
                                        </RadzenFormField>
                                        <div style="margin-top: 1.5rem">
                                            <RadzenCheckBox @bind-Value=@rememberMe Name="remember_me" />
                                            <RadzenLabel Text="Ghi nhớ đăng nhập" Component="remember_me"
                                                         Style="margin-left: 8px; vertical-align: middle;" />
                                        </div>
                                        <RadzenButton style="margin-top: 1.5rem; width: 100%; background-color:#112572"
                                                      ButtonType="ButtonType.Submit"
                                                      class="rz-info-darker"
                                                      Text="Đăng nhập"
                                                      IsBusy="@isBusy"
                                                      Disabled="@isBusy">
                                        </RadzenButton>
                                    </ChildContent>
                                </RadzenTemplateForm>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private LoginModel loginModel = new();
    private bool showPassword = false;
    private bool rememberMe = false;
    private bool isBusy = false;

    public class LoginModel
    {
        public string Username { get; set; } = "";
        public string Password { get; set; } = "";
    }

    public class TokenResponse
    {
        public string access_token { get; set; }
        public string refresh_token { get; set; }
        public string token_type { get; set; }
        public int expires_in { get; set; }
        // Thêm các properties khác nếu cần
    }

    private async Task HandleLoginAsync()
    {
        try
        {
            isBusy = true;

            var response = await Http.PostAsJsonAsync("api/AuthKeyCloak/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var tokenResponse = await response.Content.ReadFromJsonAsync<TokenResponse>();

                if (tokenResponse != null)
                {
                    // Lưu token vào storage
                    var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
                    await customAuthStateProvider.UpdateAuthenticationState(
                        tokenResponse.access_token,
                        rememberMe ? "local" : "session"
                    );

                    // Chuyển hướng về trang chủ
                    UriHelper.NavigateTo("/home", true);
                }
                else
                {
                    NotificationService.Notify(NotificationSeverity.Error,
                        "Thông báo",
                        "Không thể xử lý phản hồi từ server");
                }
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error,
                    "Thông báo",
                    "Sai tên đăng nhập hoặc mật khẩu người dùng");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error,
                "Thông báo",
                "Đã có lỗi xảy ra khi đăng nhập: " + ex.Message);
        }
        finally
        {
            isBusy = false;
        }
    }
}