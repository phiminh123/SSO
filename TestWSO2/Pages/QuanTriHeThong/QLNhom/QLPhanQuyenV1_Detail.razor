@using NewProject.Models
@inject dbAccountContext dbContext
@inject Radzen.DialogService dialog
@inject NotificationService notificationService
@inject NavigationManager UriHelper
@inject IJSRuntime JSRuntime
@inject ApiServices apiService
@using Microsoft.EntityFrameworkCore;
@using NewProject.Components
@using NewProject.Services

<div class="col-12">
    <RadzenLabel Text="Danh sách chức năng"
        Style="font-family: 'Source Sans Pro', sans-serif; font-weight: 500; color: #000; font-size: 18px; margin-bottom: 10px; margin-top: 10px; width: 100%">
    </RadzenLabel>
    <RadzenCard>
        <RadzenTree Style="height: 400px; width: 100%">
            @renderFeature(null, 1, "")
        </RadzenTree>
    </RadzenCard>
    <div style="margin-top: 10px; float: right">
        <RadzenButton Style="margin-right: 10px" Click="Submit">Cập nhật</RadzenButton>
        <RadzenButton ButtonStyle="ButtonStyle.Light" Click="Cancel">Thoát</RadzenButton>
    </div>
</div>


@code {
    [Parameter] public tbNhom Record { get; set; }
    List<tbChucNang> lstChucNang = new List<tbChucNang>();
    List<int?> featureId = new List<int?>();
    List<bool> lstCheckBox = new List<bool>();
    tbNhom Selected = new tbNhom();

    protected override async Task OnInitializedAsync()
    {
        lstChucNang = await apiService.GetAll<tbChucNang>("api/chucnang/getallnopaged");
        lstChucNang = lstChucNang.OrderBy(item => item.STT).ToList();
        //lstChucNang = dbContext.tbChucNangs.OrderBy(item => item.STT).ToList();

        //Lấy danh sách các chức năng của nhóm được chọn
        string lamda = "p=>p.IdNhom==" + Record.IdNhom;
        featureId = (await apiService.GetAll<tbChucNang_Nhom>("api/chucnang_nhom/getallnopaged", lamda)).Select(p=>p.IdChucNang).ToList();
        //featureId = dbContext.tbChucNang_Nhoms.Where(p=>p.IdNhom==Record.IdNhom).Select(item => item.IdChucNang).ToList();
        
        //Đánh dấu các trức năng của nhóm được chọn
        lstChucNang.ForEach(item =>
        {
            bool flag = featureId.Contains(item.IdChucNang) ? true : false;
            lstCheckBox.Add(flag);
        });
        base.OnInitialized();
    }
    RenderFragment renderFeature(int? Parent, int level, string STT)
    {
        List<tbChucNang> list = lstChucNang.Where(item => item.ChucNangCha == Parent).OrderBy(item => item.STT).ToList();

        return
    @<div>
            @for (int i = 0; i < list.Count; i++)
        {
            tbChucNang item = list[i];
            int Index = lstChucNang.IndexOf(item);
            List<string> arr = STT.Split(".").ToList();
            if (arr.Count == 1)
            {
                arr[arr.Count - 1] = (i + 1).ToString();
            }
            else
            {
                arr.Add((i + 1).ToString());
            }
            List<tbChucNang> temp = lstChucNang.Where(para => para.ChucNangCha == item.IdChucNang).ToList();
            bool checkRender = temp.Count > 0 ? true : false;
            @if (checkRender)
            {
                                <RadzenTreeItem>
                                    <Template>
                                        <RadzenCheckBox @bind-Value=@lstCheckBox[Index] Style="margin-right: 10px" /> @(String.Join(".", arr) + ". "
            + item.TenChucNang)
                                    </Template>
                                    <ChildContent>
                        @renderFeature(item.IdChucNang, level + 1, String.Join(".", arr))
                                    </ChildContent>
                                </RadzenTreeItem>
            }
            else
            {
                                <RadzenTreeItem>
                                    <Template>
                                        <RadzenCheckBox @bind-Value=@lstCheckBox[Index] Style="margin-right: 10px" /> @(String.Join(".", arr) + ". "
            + item.TenChucNang)
                                    </Template>
                                </RadzenTreeItem>
            }

        }
    </div>
    ;
    }

    void Cancel()
    {
        dialog.Close(null);
    }

    async void Submit()
    {
        //Bỏ các chức năng ban đầu của nhóm
        foreach(var it in featureId)
        {
            string lamda = "p=>p.IdChucNang==" + it;
            await apiService.Delete<tbChucNang_Nhom>("api/chucnang_nhom", lamda,false);
        }

        //Bổ sung các chức năng mới của nhóm
        tbChucNang_Nhom chucnang_nhom;
        for (int i = 0; i < lstChucNang.Count; i++)
        {
            if (lstCheckBox[i] == true)
            {
                chucnang_nhom = new tbChucNang_Nhom();
                chucnang_nhom.IdChucNang_Nhom = await apiService.GetId<int>("api/chucnang_nhom/getid", "seq_tbChucNang_Nhom");
                chucnang_nhom.IdChucNang = lstChucNang[i].IdChucNang;
                chucnang_nhom.IdNhom = Record.IdNhom;
                await apiService.Create<tbChucNang_Nhom>("api/chucnang_nhom", chucnang_nhom);
            }
        }
        dialog.Close();
    }
}